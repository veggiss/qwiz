@model List<Quiz>

<h2 class="text-center">Quizzes of the day</h2>
<div id="carouselIndicators" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators position-relative m-0 align-text-top">
        <li data-target="#carouselIndicators" data-slide-to="0" class="active"></li>
        <li data-target="#carouselIndicators" data-slide-to="1"></li>
        <li data-target="#carouselIndicators" data-slide-to="2"></li>
    </ol>
    
    <div class="carousel-inner">
        <div class="carousel-item active">
            <div class="w-100 d-flex justify-content-center">
                @await Html.PartialAsync("Quiz/_QuizCardSinglePartial", @Model.ElementAt(0))
            </div>
        </div>
        <div class="carousel-item">
            <div class="w-100 d-flex justify-content-center">
                @await Html.PartialAsync("Quiz/_QuizCardSinglePartial", @Model.ElementAt(1))
            </div>
        </div>
        <div class="carousel-item">
            <div class="w-100 d-flex justify-content-center">
                @await Html.PartialAsync("Quiz/_QuizCardSinglePartial", @Model.ElementAt(2))
            </div>
        </div>
    </div>
    <a class="carousel-control-prev" href="#carouselIndicators" role="button" data-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="carousel-control-next" href="#carouselIndicators" role="button" data-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

<br>


<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" data-toggle="tab" href="#popular">Quizzes of the week</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#top100">Top 100</a>
    </li>
    
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" href="#Categories">Categories</a>
    </li>
    
    <li class="nav-item ml-auto">
        <input class="form-control mr-sm-1" type="search" placeholder="Search" aria-label="Search">
    </li>
</ul>

<br>
    
<div id="tabContent" class="tab-content">
    <div class="tab-pane fade active show" id="popular">
        <p>Quizzes of the week</p>
    </div>
    
    <div class="tab-pane fade" id="top100">
        <div class="w-100 d-flex justify-content-center">
            <div id="top100List" style="width: 996px;"></div>
        </div>
        <template id="top100Paginate">
            <paginate class="w-100 d-flex justify-content-center"
                      :page-count="top100PageCount"
                      :page-range="5"
                      :margin-pages="0"
                      :click-handler="top100Callback"
                      :prev-text="'Prev'"
                      :next-text="'Next'"
                      :container-class="'pagination'"
                      :page-class="'page-item'"
                      :page-link-class="'page-link'"
                      :next-link-class="'page-link'"
                      :prev-link-class="'page-link'"
                      :no-li-surround="false"
                      :first-last-button="true">
            </paginate>
        </template>
    </div>
    
    <div class="tab-pane fade" id="Categories">
        <p>Categories</p>
    </div>
</div>


<br>


@section Scripts
{
    <script>
        $(document).ready(function () {
            $('.carousel').carousel();
            
            let size = 6;
            let apiUrl = (path, page, size, type) => `${path}?username=null&page=${page}&size=${size}&type=${type}`;
            
            Vue.component('paginate', VuejsPaginate);
            let app = new Vue({
                el: '#tabContent',
                data: {
                    top100PageCount: 1
                },
                mounted: function() {
                    this.top100Callback(1);
                },
                methods: {
                    top100Callback: function(page) {
                        let self = this;
                        axios.get(apiUrl('/api/getQuizList', page, size, 'top100')).then(function(response) {
                            let pageCount = self.renderList('#top100List', response.data);
                            if (pageCount > 1) self.top100PageCount = pageCount;
                        });
                    },
                    
                    renderList: function(id, data) {
                        $(id).empty();
                        let result = $(id).html(data);
                        return parseInt($(result.find(".totalPages")[0]).attr("amount"));
                    }
                }
            });
        });
    </script>
}

